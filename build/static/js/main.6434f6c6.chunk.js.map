{"version":3,"sources":["login.js","App.js","AddIp.js","ShowIp.js","ip.js","Routes.js","serviceWorker.js","index.js"],"names":["LogIn","props","useState","name","setName","email","setEmail","typeOfUser","setTypeOfUser","setValueToLocal","a","_data","localStorage","setItem","JSON","stringify","history","push","className","onSubmit","e","preventDefault","trim","alert","type","id","placeholder","required","onChange","target","value","autoFocus","htmlFor","defaultValue","App","AddIP","data","map","i","key","disabled","onClick","d","deleteData","length","user","action","ShowInputBoxDom","_ip","addIp","ip","test","update","showInputBox","Ip","_userData","parse","getItem","ip_address","inputBox","logOut","deletedIp","filter","newIp","Routes","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAmDeA,MAlDR,SAAeC,GAAO,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,OAEEF,mBAAS,IAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGYJ,mBAAS,IAHrB,mBAGjBK,EAHiB,KAGLC,EAHK,KAQlBC,EAAe,sCAAG,4BAAAC,EAAA,4DACdC,EAAQ,CACV,KAASR,EACT,MAAUE,EACV,WAAeE,GAJC,SAMdK,aAAaC,QAAQ,cAAeC,KAAKC,UAAUJ,IANrC,OAOpBV,EAAMA,MAAMe,QAAQC,KAAK,OAPL,yCAAH,qDAUrB,OACI,6BACA,yBAAKC,UAAU,sCACf,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,0BAAd,WACA,0BAAMA,UAAU,cAAcC,SApBjB,SAACC,GAClBA,EAAEC,iBACoB,KAAtBd,EAAWe,OAAgBC,MAAM,kCAAoCd,MAmB/D,yBAAKS,UAAU,oBACb,2BAAOM,KAAK,QAAQC,GAAG,UAAUP,UAAU,eAAeQ,YAAY,gBAAgBC,UAAQ,EAACC,SAAU,SAAAR,GAAMd,EAASc,EAAES,OAAOC,QAASC,WAAS,IACnJ,2BAAOC,QAAQ,WAAf,kBAGF,yBAAKd,UAAU,oBACb,2BAAOM,KAAK,OAAOC,GAAG,SAASP,UAAU,eAAeQ,YAAY,OAAOC,UAAQ,EAACC,SAAU,SAAAR,GAAMhB,EAAQgB,EAAES,OAAOC,UACrH,2BAAOE,QAAQ,UAAf,SAEF,4BAAQ7B,KAAK,OAAOe,UAAU,gBAAgBS,UAAQ,EAACC,SAAY,SAAAR,GAAMZ,EAAcY,EAAES,OAAOC,SAC9F,4BAAQG,cAAY,GAApB,gBACA,4BAAQH,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,YAEF,wBAAIZ,UAAU,SACd,4BAAQA,UAAU,kDAAkDM,KAAK,UAAzE,WACA,wBAAIN,UAAU,eC3BbgB,MAVf,SAAajC,GACX,OACE,yBAAKiB,UAAU,aACb,yBAAKA,UAAU,IACX,kBAAC,EAAD,CAAOjB,MAAOA,O,QCqCTkC,MA5Cf,SAAelC,GAIX,OACI,6BAEQA,EAAMmC,KAAKC,IAAI,SAACjB,EAAEkB,GACd,OACI,yBAAKpB,UAAU,wBAAwBqB,IAAKD,GACxC,yBAAKpB,UAAU,aACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,6BACX,2BAAOM,KAAK,QAAQC,GAAG,aAAaP,UAAU,eAAeQ,YAAY,gBAAgBc,UAAQ,IACjG,2BAAOR,QAAQ,cAAeZ,IAElC,yBAAKF,UAAU,YACX,4BAAQA,UAAU,0BAA0BM,KAAK,SAASrB,KAAMmC,EAAGG,QAAW,SAAArB,GAhB/F,IAACsB,IAgB+GtB,EAAES,OAAO1B,KAfxIF,EAAM0C,WAAWD,KAee,MAEJ,yBAAKxB,UAAU,aAEV,WACG,GAAIoB,EAAE,IAAKrC,EAAMmC,KAAKQ,SAA0B,WAAd3C,EAAM4C,MAAqB5C,EAAMmC,KAAKQ,OAAS,IAAqB,SAAb3C,EAAM4C,MAAkB5C,EAAMmC,KAAKQ,OAAQ,GAChI,OACI,yBAAK1B,UAAU,YACX,4BAAQA,UAAU,0BAA0BM,KAAK,SAASiB,QAAW,kBAAIxC,EAAM6C,QAAO,KAAtF,MAJf,UCc1BC,MAnCf,SAAyB9C,GAAQ,IAAD,EACRC,mBAAS,IADD,mBACrB8C,EADqB,KACjBC,EADiB,KAG5B,GAAIhD,EAAMmC,OAAwB,WAAdnC,EAAM4C,MAAqB5C,EAAMiD,GAAGN,QAAU,IAAqB,SAAb3C,EAAM4C,MAAkB5C,EAAMiD,GAAGN,QAAS,GAAK,CAQrH,OACI,yBAAK1B,UAAU,oBACf,6BACE,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,oBACb,2BAAOM,KAAK,QAAQC,GAAG,UAAUP,UAAU,eAAeY,MAAOkB,EAAKtB,YAAY,KAAKC,UAAQ,EAACC,SAAW,SAAAR,GAAM6B,EAAM7B,EAAES,OAAOC,UAChI,2BAAOE,QAAQ,WAAf,YAGN,yBAAKd,UAAU,aACb,4BAAQA,UAAU,0BAA0BM,KAAK,SAASiB,QAAW,SAAArB,GAnB1D,mDAAmD+B,KAG5DH,IACF/C,EAAMmD,OAAOJ,GACbC,EAAM,IACNhD,EAAMoD,cAAa,IAHV9B,MAAM,qBAgBf,WAOR,OACI,+BCoBG+B,MA/CR,SAAYrD,GACf,IAAMsD,EAAYzC,KAAK0C,MAAM5C,aAAa6C,QAAQ,gBAClC,MAAbF,GAAmBtD,EAAMe,QAAQC,KAAK,UAFnB,MAGKf,mBAAS,WACjC,IAAIS,EAAQG,KAAK0C,MAAM5C,aAAa6C,QAAQ,QAC3C,OAAgB,MAAT9C,EAAgB,GAAKA,IALV,mBAGhB+C,EAHgB,KAGJT,EAHI,OAQU/C,mBAAS,WACtC,OAA6B,IAAtBwD,EAAWd,SATC,mBAQhBe,EARgB,KAQNN,EARM,KA2BpBO,GAhBWF,EAAW,GAgBhB,sCAAG,sBAAAhD,EAAA,qDACXE,aAAaC,QAAQ,MAAM,MAC3BD,aAAaC,QAAQ,cAAe,MACpCZ,EAAMe,QAAQC,KAAK,UAHR,yCAAH,sDAMR,OACI,yBAAKC,UAAU,aACX,4BAAQA,UAAU,yCAAyCuB,QAAW,WAAOmB,MAA7E,UACA,yBAAK1C,UAAU,OACX,kBAAC,EAAD,CAAOkB,KAAMsB,EAAYZ,OAAQO,EAAcV,WApBzC,SAACD,GACI,IAApBgB,EAAWd,QACVS,GAAa,GAEjB,IAAMQ,EAAYH,EAAWI,OAAO,SAAC1C,EAAEkB,GACnC,OAAOA,GAAKI,IAEhBO,EAAMY,GACNjD,aAAaC,QAAQ,MAAMC,KAAKC,UAAU8C,KAYyChB,KAAMU,EAAUhD,cAE3F,yBAAKW,UAAU,OACX,kBAAC,EAAD,CAAiBkB,KAAMuB,EAAWP,OA5BxB,SAACJ,GACpB,IAAMe,EAAK,sBAAOL,GAAP,CAAmBV,IAC7BC,EAAMc,GACNnD,aAAaC,QAAQ,MAAMC,KAAKC,UAAUgD,KAyBwBb,GAAIQ,EAAYb,KAAMU,EAAUhD,WAAY8C,aAAcA,OC7BrHW,MAVR,WACH,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,SAAAlE,GAAK,OAAI,kBAAC,EAAQA,MAChD,kBAAC,IAAD,CAAOgE,KAAK,SAASE,OAAQ,SAAAlE,GAAK,OAAI,kBAAC,EAAQA,MAC/C,kBAAC,IAAD,CAAOgE,KAAK,MAAME,OAAQ,SAAAlE,GAAK,OAAI,kBAAC,EAAOA,QCEnCmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAAYO,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6434f6c6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nexport function LogIn(props){\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [typeOfUser, setTypeOfUser] = useState(\"\");\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        typeOfUser.trim() === \"\" ? alert(\"Please select the type of User\") : setValueToLocal();\n    }\n    const setValueToLocal = async() => {\n        const _data = {\n            \"name\" : name,\n            \"email\" : email,\n            \"typeOfUser\" : typeOfUser\n        }\n        await localStorage.setItem(\"userDetails\", JSON.stringify(_data));\n        props.props.history.push('/ip');\n    };\n\n    return(\n        <div>\n        <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n        <div className=\"card card-signin my-5\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title text-center\">Sign In</h5>\n            <form className=\"form-signin\" onSubmit={handleSubmit}>\n              <div className=\"form-label-group\">\n                <input type=\"email\" id=\"i-email\" className=\"form-control\" placeholder=\"Email address\" required onChange={e => {setEmail(e.target.value)}} autoFocus  />\n                <label htmlFor=\"i-email\" >Email address</label>\n              </div>\n\n              <div className=\"form-label-group\">\n                <input type=\"text\" id=\"i-name\" className=\"form-control\" placeholder=\"Name\" required onChange={e => {setName(e.target.value)}} />\n                <label htmlFor=\"i-name\" >Name</label>\n              </div>\n              <select name=\"cars\" className=\"custom-select\" required onChange = {e => {setTypeOfUser(e.target.value)}}>\n                <option defaultValue>Type Of User</option>\n                <option value=\"basic\">Basic</option>\n                <option value=\"premium\">Premium</option>\n              </select>\n              <hr className=\"my-4\" />\n              <button className=\"btn btn-lg btn-primary btn-block text-uppercase\" type=\"submit\">Sign in</button>\n              <hr className=\"my-4\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n};\n\nexport default LogIn;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport LogIn from './login';\n\nfunction App(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"\">\n          <LogIn props={props} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nfunction AddIP(props) {\n    const deleteData = (d) => {\n        props.deleteData(d)\n    }\n    return (\n        <div>\n            {\n                props.data.map((e,i) => {\n                    return(\n                        <div className=\"card card-signin my-5\" key={i}>\n                            <div className=\"card-body\">\n                                <div className=\"row flex-display\">\n                                    <div className=\"col-md-8 form-label-group\">\n                                        <input type=\"email\" id=\"i-added-ip\" className=\"form-control\" placeholder=\"Email address\" disabled  />\n                                        <label htmlFor=\"i-added-ip\" >{e}</label>\n                                    </div>\n                                    <div className=\"col-md-1\">\n                                        <button className=\"btn btn-lg btn-primary \" type=\"submit\" name={i} onClick = {e => {deleteData(e.target.name)}}>-</button>\n                                    </div>\n                                    <div className=\"col-md-1\"></div>\n                                    {\n                                        (function(){\n                                            if((i+1)===props.data.length && ((props.user == \"premium\" && props.data.length < 10) || (props.user ==\"basic\" && props.data.length< 5)) ){\n                                                return(\n                                                    <div className=\"col-md-1\">\n                                                        <button className=\"btn btn-lg btn-primary \" type=\"submit\" onClick = {()=>props.action(true)} >+</button>\n                                                    </div>\n                                                )\n                                            }\n                                            else{\n                                                // props.showInputBox(false);\n                                            }\n                                        })()\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default AddIP;","import React, {useState} from 'react'\n\nfunction ShowInputBoxDom(props) {\n    const [_ip,addIp] = useState(\"\")\n    const isIp = value => (/^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$/.test(value) ? true : false);\n    if((props.data && ((props.user == \"premium\" && props.ip.length <= 10) || (props.user ==\"basic\" && props.ip.length<= 5)))){\n        const saveIp = () => {\n            !isIp(_ip) ? alert(\"Wrong Format IP\") : (() => {\n                props.update(_ip);\n                addIp(\"\");\n                props.showInputBox(false);\n            })()\n        }\n        return(\n            <div className=\"card card-signin\">\n            <div>\n              <div className=\"row card-body\">\n                  <div className=\"form-label-group\">\n                    <input type=\"email\" id=\"i-email\" className=\"form-control\" value={_ip} placeholder=\"IP\" required onChange= {e => {addIp(e.target.value)}} />\n                    <label htmlFor=\"i-email\" >New Ip</label>\n                  </div>\n              </div>\n              <div className=\"card-body\">\n                <button className=\"btn btn-lg btn-primary \" type=\"submit\" onClick = {e => {saveIp()}} >Save</button>\n              </div>\n              </div>\n            </div>\n        )\n    }\n    else{\n        return(\n            <div></div>\n        )\n    }\n    \n}\n\nexport default ShowInputBoxDom;","import React, {useState} from 'react';\nimport AddIP from './AddIp';\nimport ShowInputBoxDom from './ShowIp';\n\nexport function Ip(props) {\n    const _userData = JSON.parse(localStorage.getItem(\"userDetails\"));\n    if(_userData == null) props.history.push('/login');\n   const [ip_address, addIp] = useState(() => {\n       let _data = JSON.parse(localStorage.getItem(\"ips\"));\n        return _data == null ? [] : _data;\n   });\n    \n   const [inputBox, showInputBox] = useState(() => {\n       return ip_address.length === 0 ? true : false\n   });\n    let _value = ip_address[0];\n   const addIpFromChild = (_ip) => {\n       const newIp = [...ip_address, _ip]\n        addIp(newIp);\n        localStorage.setItem(\"ips\",JSON.stringify(newIp));\n   }\n   const deleteData = (d) => {\n    if(ip_address.length===1){\n        showInputBox(true);\n    }\n    const deletedIp = ip_address.filter((e,i) => {\n        return i != d\n    })\n    addIp(deletedIp);\n    localStorage.setItem(\"ips\",JSON.stringify(deletedIp));\n};\nconst logOut = async() => {\n    localStorage.setItem(\"ips\",null);\n    localStorage.setItem(\"userDetails\", null);\n    props.history.push('/login');\n}\n   \n    return(\n        <div className=\"container\">\n            <button className=\"float-right my-5 btn btn-lg btn-danger\" onClick= { () => {logOut()}}>LogOut</button>\n            <div className=\"row\">\n                <AddIP data={ip_address} action={showInputBox} deleteData={deleteData} user={_userData.typeOfUser} />\n            </div>\n            <div className=\"row\">\n                <ShowInputBoxDom data={inputBox}  update={addIpFromChild} ip={ip_address} user={_userData.typeOfUser} showInputBox={showInputBox}/>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Ip;","import React from 'react';\nimport {BrowserRouter, Route } from 'react-router-dom';\nimport App from './App';\nimport Ip from './ip';\n\nexport function Routes() {\n    return(\n        <BrowserRouter>\n            <Route path=\"/\" exact render={props => <App {...props} />} />\n            <Route path=\"/login\" render={props => <App {...props} />} />\n            <Route path=\"/ip\" render={props => <Ip {...props} />} />\n        </BrowserRouter>\n    )\n}\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}